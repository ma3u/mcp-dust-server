### Architecture Analysis:
- Need to bridge MCP protocol with Dust API while maintaining state[1][2]
- One of the most critical aspects of MCP server development is proper logging. Since the stdio transport reserves stdout for protocol responses, improper logging can break your server's functionality.
- The standard stdio transport in MCP reserves stdout for protocol communication, making traditional console logging problematic. Instead, implement one of these alternatives: console.error("Debug information"); and logger.debug("Debug information"); to log in a seperate log
- For more complex servers, implement MDC (Mapped Diagnostic Context) to add contextual information to log entries: https://dev.to/codenameone/logging-best-practices-mdc-ingestion-and-scale-12fa
  1. Create a utility class that handles MDC operations
  2. Set MDC values at the beginning of request processing
  3. Clear MDC values when request processing is complete
  4. Handle thread pool cleanup for asynchronous operations
- Implementing MCP Core Concepts:
  1. Resources Implementation; Resources provide file-like data that can be read by clients:
   - Implement proper path validation to prevent path traversal attacks
   - Use asynchronous operations for I/O-bound tasks
   - Set appropriate content types for different resource types
   - Implement caching for frequently accessed resources
  2. Tools Implementation; Tools are functions that can be called by the LLM
   - Provide clear descriptions and input schemas
   - Implement proper error handling and validation
   - Return well-structured responses
   - Make tools idempotent when possible
  3. Prompts Implementation; Prompts provide pre-written templates for users:
   - Create reusable templates with clear variable placeholders
   - Document the purpose and usage of each prompt
   - Provide sensible defaults for optional variables
   - Group related prompts together logically
- Error Handling Best Practices:
- Log detailed error information for debugging
  - Return user-friendly error messages to clients
  - Use appropriate error types and codes
  - Handle both expected and unexpected errors
  - Avoid exposing sensitive information in error messages
- Using MCP Inspector for Debugging; The MCP Inspector is a valuable tool for debugging and testing MCP servers:
  1. Start your MCP server
  2. Run the MCP Inspector client
  3. Connect to your server
  4. Test tools, resources, and prompts interactively
- Implement rate limiting for external API calls
- SSE required for real-time updates[9]
- use modelcontextprotocol/mcp-core 
- Use the SDK adheres to MCP's JSON-RPC 2.0 messaging format
- use remote (HTTP + SSE) transport mechanisms
- support final MCP specification: https://spec.modelcontextprotocol.io/specification/2024-11-05/
- support latest MCP specification: https://spec.modelcontextprotocol.io/specification/2025-03-26/
- support HTTPStreamTransport and SSE 
- Adding HTTP Stream endpoints in parallel
- implement a session middleware: 
- Using the official SDK for Typescript for Protocol Compliance(Full MCP spec adherence): https://github.com/modelcontextprotocol/typescript-sdk
- use the core library: https://github.com/modelcontextprotocol/mcp-core
- Implementing protocol version detection

## Security checklist
- Use Zod for all input validation (Source)
- Implement dual transport support (SSE+HTTP)
- Mask PII in logs using regex patterns
- Add health check endpoints (/live, /ready)
- Test with ≥100 concurrent sessions
- Standardized Errors: Use McpError with appropriate error codes for consistent error responses.
- Session Tracking: Use a Map or Redis to track active sessions and associate them with transports.
- Auto-Cleanup: Implement TTL-based session expiration to prevent memory leaks.
Follow the MCP Lifecycle: Implement the three key stages—Initialization, Message Exchange, and Termination.
- Transport Selection: Use SSE for real-time streaming and HTTP for batch processing. Choose transports based on your application needs.
- Environment Variables: Store sensitive data (e.g., API keys) in environment variables and never hard-code them.
- Use the Official SDK: Install the MCP TypeScript SDK to ensure compliance with the latest MCP specification.
- Mask Sensitive Data in Logs: Ensure API keys and session IDs are masked in logs.
- Input Sanitization: Validate all user inputs to prevent injection attacks.
- Caching: Cache frequently accessed resources to reduce latency.
- Concurrency: Use asynchronous programming to handle multiple requests concurrently.

## Dust Integration:
- Analyze Dust SDK patterns[2]
- Agent configuration requirements[7]
- Stream handling best practices[9]
- Use the Dust SDK for Typescript: https://github.com/dust-tt/dust-sdk-js

## Protocol Mapping:
- MCP tools ↔ Dust agent capabilities[1][3]
- Resource management for files[6]
- Error handling across systems[5]

## Performance Aspects:
- SSE connection management[9]
- Conversation context caching
- Timeout handling[4]

## Key Technical Decisions:

1. **Session Management**:
- Session Storage: Use Redis for production deployments
- Validation: Verify session ownership for resource access
- Encryption: Encrypt sensitive context data at rest
- Monitoring: Track session metrics (duration, resource usage)
- Testing: Use MCP Inspector for validation to test server compliance and debug interactions.
- use the Auto-Expiring Sessions: LRU cache with TTL-based cleanup

2. **Streaming Architecture**:
- SSE and HTTPStreamTransport for real-time updates[9]
- Chunked response handling[2]
- Event type differentiation[1]

3. **Security Implementation**:
- Regex-based log masking[11]
- Input schema validation[12]
- Secure resource access control[4]

4. **Dust Integration**:
- Official SDK usage[2]
- Context-aware agent prompting[7]
- Error propagation handling[5]

5. **Unit Testing**
- Implement comprehensive testing for your MCP server:
- Write tests for all tools, resources, and prompts
- Test both success and error paths
- Mock external dependencies
- Use test fixtures for consistent inputs
- Implement integration tests with the MCP Inspector

6. **Documentation**:
- Document all tools, resources, and endpoints clearly for developers and the end users using your server.

## Troubleshooting

- If you have issues with the server implementation, check the reference implementation for type script you can find on the offical website: https://github.com/modelcontextprotocol/servers?tab=readme-ov-file#-reference-servers
- Use the MCP Inspector for debugging and testing MCP servers
- Check the logs in logs folder and the console for errors, also the Cloude Desktop logs

[1] https://github.com/modelcontextprotocol/typescript-sdk
[2] https://github.com/dust-tt/dust-sdk-js
[3] https://modelcontextprotocol.io/quickstart/user
[4] https://eprint.iacr.org/2018/438.pdf
[5] https://mcp.so/server/mcp-server-test/sterashima78
[6] https://glama.ai/mcp/servers/3jsu6wpgzt/blob/main/src/index.ts
[7] https://dust.tt
[8] https://dev.to/suzuki0430/the-easiest-way-to-set-up-mcp-with-claude-desktop-and-docker-desktop-5o
[9] https://dev.to/manojspace/real-time-log-streaming-with-nodejs-and-react-using-server-sent-events-sse-48pk
[10] https://stackoverflow.com/questions/1466905/hiding-sensitive-confidential-information-in-log-files
[11] https://github.com/trentm/node-bunyan/issues/591
[12] https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html
[13] https://mcp.so/server/mcp-test-client/crazyrabbitLTC
[14] https://github.com/modelcontextprotocol
[15] https://github.com/dust-tt/dust